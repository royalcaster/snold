#include "fonts.h"

// --- CUSTOM 8x8 FONT DEFINITIONS ---
// Each character is 8x8 pixels, stored as 8 bytes per character
const uint8_t customFont8x8[][8] = {
  // Space (ASCII 32)
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
  
  // ! (ASCII 33)
  {0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00},
  
  // " (ASCII 34)
  {0x6C, 0x6C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00},
  
  // # (ASCII 35)
  {0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},
  
  // $ (ASCII 36)
  {0x18, 0x3C, 0x60, 0x38, 0x0C, 0x78, 0x18, 0x00},
  
  // % (ASCII 37)
  {0x66, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x66, 0x00},
  
  // & (ASCII 38)
  {0x38, 0x6C, 0x38, 0x60, 0x66, 0x6C, 0x3A, 0x00},
  
  // ' (ASCII 39)
  {0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00},
  
  // ( (ASCII 40)
  {0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00},
  
  // ) (ASCII 41)
  {0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00},
  
  // * (ASCII 42)
  {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00},
  
  // + (ASCII 43)
  {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00},
  
  // , (ASCII 44)
  {0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00},
  
  // - (ASCII 45)
  {0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00},
  
  // . (ASCII 46)
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00},
  
  // / (ASCII 47)
  {0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00},
  
  // 0 (ASCII 48)
  {0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00},
  
  // 1 (ASCII 49)
  {0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00},
  
  // 2 (ASCII 50)
  {0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x7E, 0x00},
  
  // 3 (ASCII 51)
  {0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00},
  
  // 4 (ASCII 52)
  {0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00},
  
  // 5 (ASCII 53)
  {0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00},
  
  // 6 (ASCII 54)
  {0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00},
  
  // 7 (ASCII 55)
  {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00},
  
  // 8 (ASCII 56)
  {0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00},
  
  // 9 (ASCII 57)
  {0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00},
  
  // : (ASCII 58)
  {0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00},
  
  // ; (ASCII 59)
  {0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00},
  
  // < (ASCII 60)
  {0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00},
  
  // = (ASCII 61)
  {0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00},
  
  // > (ASCII 62)
  {0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00},
  
  // ? (ASCII 63)
  {0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00},
  
  // @ (ASCII 64)
  {0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x66, 0x3C, 0x00},
  
  // A (ASCII 65)
  {0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00},
  
  // B (ASCII 66)
  {0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00},
  
  // C (ASCII 67)
  {0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00},
  
  // D (ASCII 68)
  {0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00},
  
  // E (ASCII 69)
  {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00},
  
  // F (ASCII 70)
  {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00},
  
  // G (ASCII 71)
  {0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00},
  
  // H (ASCII 72)
  {0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00},
  
  // I (ASCII 73)
  {0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00},
  
  // J (ASCII 74)
  {0x3E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00},
  
  // K (ASCII 75)
  {0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00},
  
  // L (ASCII 76)
  {0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00},
  
  // M (ASCII 77)
  {0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00},
  
  // N (ASCII 78)
  {0x63, 0x73, 0x7B, 0x7F, 0x6F, 0x67, 0x63, 0x00},
  
  // O (ASCII 79)
  {0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00},
  
  // P (ASCII 80)
  {0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00},
  
  // Q (ASCII 81)
  {0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00},
  
  // R (ASCII 82)
  {0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00},
  
  // S (ASCII 83)
  {0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00},
  
  // T (ASCII 84)
  {0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00},
  
  // U (ASCII 85)
  {0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00},
  
  // V (ASCII 86)
  {0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00},
  
  // W (ASCII 87)
  {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},
  
  // X (ASCII 88)
  {0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00},
  
  // Y (ASCII 89)
  {0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00},
  
  // Z (ASCII 90)
  {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00}
};

// --- CUSTOM 16x16 FONT DEFINITIONS ---
// Each character is 16x16 pixels, stored as 16 words per character
const uint16_t customFont16x16[][16] = {
  // Space (ASCII 32) - 16x16
  {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
  
  // ! (ASCII 33) - 16x16
  {0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
  
  // 0 (ASCII 48) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818,
   0x1818, 0x1818, 0x1818, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000},
  
  // 1 (ASCII 49) - 16x16
  {0x0180, 0x0380, 0x0780, 0x0F80, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
  
  // 2 (ASCII 50) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x0018, 0x0038, 0x0070, 0x00E0,
   0x01C0, 0x0380, 0x0700, 0x0E00, 0x1C00, 0x1FF8, 0x1FF8, 0x0000},
  
  // 3 (ASCII 51) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x0018, 0x0038, 0x01F0, 0x01F0,
   0x0038, 0x0018, 0x1818, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000},
  
  // 4 (ASCII 52) - 16x16
  {0x0030, 0x0070, 0x00F0, 0x01F0, 0x03F0, 0x0730, 0x0E30, 0x1C30,
   0x1FF8, 0x1FF8, 0x0030, 0x0030, 0x0030, 0x0030, 0x0000, 0x0000},
  
  // 5 (ASCII 53) - 16x16
  {0x1FF8, 0x1FF8, 0x1800, 0x1800, 0x1FE0, 0x1FF0, 0x0038, 0x0018,
   0x0018, 0x0018, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000, 0x0000},
  
  // 6 (ASCII 54) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x1800, 0x1FE0, 0x1FF0, 0x1C38,
   0x1818, 0x1818, 0x1818, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000},
  
  // 7 (ASCII 55) - 16x16
  {0x1FF8, 0x1FF8, 0x0018, 0x0038, 0x0070, 0x00E0, 0x01C0, 0x0380,
   0x0700, 0x0E00, 0x1C00, 0x1800, 0x1800, 0x1800, 0x0000, 0x0000},
  
  // 8 (ASCII 56) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x1818, 0x1C38, 0x0FF0, 0x0FF0,
   0x1C38, 0x1818, 0x1818, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000},
  
  // 9 (ASCII 57) - 16x16
  {0x07E0, 0x0FF0, 0x1C38, 0x1818, 0x1818, 0x1818, 0x1C38, 0x0FF8,
   0x0078, 0x0018, 0x1818, 0x1C38, 0x0FF0, 0x07E0, 0x0000, 0x0000}
};

// --- FONT FUNCTION IMPLEMENTATIONS ---

/**
 * @brief Draws a single character using the custom 8x8 font
 */
void drawCustomChar(Adafruit_GFX* display, char c, int x, int y, uint16_t color, uint8_t fontSize) {
  if (fontSize == FONT_SIZE_8) {
    // Use 8x8 font
    if (c >= 32 && c <= 90) { // ASCII range we have defined
      const uint8_t* charData = customFont8x8[c - 32];
      for (int row = 0; row < 8; row++) {
        uint8_t rowData = charData[row];
        for (int col = 0; col < 8; col++) {
          if (rowData & (0x80 >> col)) {
            display->drawPixel(x + col, y + row, color);
          }
        }
      }
    }
  } else if (fontSize == FONT_SIZE_16) {
    // Use 16x16 font
    if (c >= 32 && c <= 57) { // ASCII range we have defined
      const uint16_t* charData = customFont16x16[c - 32];
      for (int row = 0; row < 16; row++) {
        uint16_t rowData = charData[row];
        for (int col = 0; col < 16; col++) {
          if (rowData & (0x8000 >> col)) {
            display->drawPixel(x + col, y + row, color);
          }
        }
      }
    }
  }
}

/**
 * @brief Draws text using the custom font
 */
void drawCustomText(Adafruit_GFX* display, const char* text, int x, int y, uint16_t color, uint8_t fontSize) {
  int currentX = x;
  int charWidth = fontSize;
  
  for (int i = 0; text[i] != '\0'; i++) {
    drawCustomChar(display, text[i], currentX, y, color, fontSize);
    currentX += charWidth;
  }
} 